/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI10721175 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10721172 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10721171 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10491242 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI5585232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5840011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10491032 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1188005 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI10491034 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10491028 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1188009 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI10491039 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2090020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10491207 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194649.base = NTI1194619;
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI10491207 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}]};
NTI10491207.node = NNI10491207;
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
NTI1194641.base = NTI1194619;
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
NTI1194653.base = NTI1194619;
var NNI2090020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI2090020.node = NNI2090020;
NTI10491039.base = NTI1188009;
var NNI10491028 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "r", len: 0, typ: NTI10491039, name: "r", sons: null}, 
{kind: 1, offset: "g", len: 0, typ: NTI10491039, name: "g", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI10491039, name: "b", sons: null}]};
NTI10491028.node = NNI10491028;
var NNI10491032 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI10491032, name: "d65", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10491032, name: "d55", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10491032, name: "d50", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10491032, name: "a", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10491032, name: "c", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10491032, name: "e", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10491032, name: "icc", len: 0, sons: null}}};
NTI10491032.node = NNI10491032;
var NNI10491034 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI1188005, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI1188005, name: "y", sons: null}, 
{kind: 1, offset: "z", len: 0, typ: NTI1188005, name: "z", sons: null}, 
{kind: 1, offset: "wp", len: 0, typ: NTI10491032, name: "wp", sons: null}]};
NTI10491034.node = NNI10491034;
var NNI1194635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194635.node = NNI1194635;
NTI1194635.base = NTI1194633;
var NNI5840011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5585232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI5840011.node = NNI5840011;
var NNI10491242 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}]};
NTI10491242.node = NNI10491242;
var NNI10721172 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}]};
NTI10721172.node = NNI10721172;
var NNI10721171 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10721172, name: "Field1", sons: null}]};
NTI10721171.node = NNI10721171;
var NNI10721175 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}]};
NTI10721175.node = NNI10721175;
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if (((code_1455199).length == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
          var colorsTable_10491239 = [{Field0: makeNimstrLit("colorLight"), Field1: {Field0: makeNimstrLit("#f8f9fa"), Field1: makeNimstrLit("#f9f9f9")}}, {Field0: makeNimstrLit("colorLightMedium"), Field1: {Field0: makeNimstrLit("#d4d4d4"), Field1: makeNimstrLit("#b0b0b0")}}, {Field0: makeNimstrLit("colorMedium"), Field1: {Field0: makeNimstrLit("#c4c4c4"), Field1: makeNimstrLit("#787878")}}, {Field0: makeNimstrLit("colorMediumDark"), Field1: {Field0: makeNimstrLit("#999999"), Field1: makeNimstrLit("#474747")}}, {Field0: makeNimstrLit("colorDark"), Field1: {Field0: makeNimstrLit("#727272"), Field1: makeNimstrLit("#121212")}}, {Field0: makeNimstrLit("colorClickableBlue"), Field1: {Field0: makeNimstrLit("#3497e4"), Field1: makeNimstrLit("#3396e4")}}, {Field0: makeNimstrLit("colorDecorativeBlue"), Field1: {Field0: makeNimstrLit("#17a2d2"), Field1: makeNimstrLit("#17a2d1")}}, {Field0: makeNimstrLit("colorNavbarBackground"), Field1: {Field0: makeNimstrLit("#001629"), Field1: makeNimstrLit("#001628")}}, {Field0: makeNimstrLit("colorNavbarText"), Field1: {Field0: makeNimstrLit("#e9e9e9"), Field1: makeNimstrLit("#e8e8e8")}}, {Field0: makeNimstrLit("colorTypographyBlack"), Field1: {Field0: makeNimstrLit("#212529"), Field1: makeNimstrLit("#212529")}}, {Field0: makeNimstrLit("colorSuccessBackground"), Field1: {Field0: makeNimstrLit("#6fcf97"), Field1: makeNimstrLit("#d4f8e3")}}, {Field0: makeNimstrLit("colorSuccessText"), Field1: {Field0: makeNimstrLit("#105727"), Field1: makeNimstrLit("#116434")}}, {Field0: makeNimstrLit("colorWarningBackground"), Field1: {Field0: makeNimstrLit("#f8d7da"), Field1: makeNimstrLit("#f8d7d4")}}, {Field0: makeNimstrLit("colorWarningText"), Field1: {Field0: makeNimstrLit("#721c24"), Field1: makeNimstrLit("#71231c")}}, {Field0: makeNimstrLit("colorButtonSecondary"), Field1: {Field0: makeNimstrLit("#5a6268"), Field1: makeNimstrLit("#5a6267")}}, {Field0: makeNimstrLit("colorButtonDisabled"), Field1: {Field0: makeNimstrLit("#dcddde"), Field1: makeNimstrLit("#dbdcdd")}}];
var ConstSet2 = setConstr([48, 57], [65, 70], [97, 102]);
var ConstSet3 = setConstr([48, 57], [65, 70], [97, 102]);
var ConstSet4 = setConstr([48, 57], [65, 70], [97, 102]);
var ConstSet5 = setConstr([48, 57], [65, 70], [97, 102]);
var ConstSet6 = setConstr([48, 57], [65, 70], [97, 102]);
var ConstSet7 = setConstr([48, 57], [65, 70], [97, 102]);
function nimMin(a_1460803, b_1460804) {
    var Tmp1;

  var result_1460805 = 0;

  BeforeRet: do {
    if ((a_1460803 <= b_1460804)) {
    Tmp1 = a_1460803;
    }
    else {
    Tmp1 = b_1460804;
    }
    
    result_1460805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460805;

}
var ConstSet8 = setConstr(120, 88);
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
            var referenceValues_10491080 = [{x: 9.5046999999999997e+01, y: 1.0000000000000000e+02, z: 1.0888300000000000e+02, wp: 0}];
function nimMax(a_1460821, b_1460822) {
    var Tmp1;

  var result_1460823 = 0;

  BeforeRet: do {
    if ((b_1460822 <= a_1460821)) {
    Tmp1 = a_1460821;
    }
    else {
    Tmp1 = b_1460822;
    }
    
    result_1460823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460823;

}
function nimFloatToString(a_1460649) {
  var result_1460650 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_1460649)) result_1460650 =  a_1460649+".0"
    else {
      result_1460650 = a_1460649+""
      if(nimOnlyDigitsOrMinus(result_1460650)){
        result_1460650 = a_1460649+".0"
      }
    }
  

  return result_1460650;

}
var ConstSet9 = setConstr(60, 62, 94);
var ConstSet10 = setConstr(60, 62, 94);
var ConstSet11 = setConstr(45, 43, 32);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([48, 57]);
var ConstSet14 = setConstr([48, 57]);
function divInt(a_1460473, b_1460474) {
        if (b_1460474 == 0) raiseDivByZero();
    if (b_1460474 == -1 && a_1460473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460473 / b_1460474);
  

  
}
function mulInt(a_1460455, b_1460456) {
        var result = a_1460455 * b_1460456;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet15 = setConstr([65, 90], [97, 122]);
var ConstSet16 = setConstr(46, 44);
function nimCharToStr(x_1375674) {
  var result_1375675 = [];

    result_1375675 = nimCopy(null, mnewString(1), NTI1188013);
    result_1375675[0] = x_1375674;

  return result_1375675;

}
var ConstSet17 = setConstr([65, 90]);
var ConstSet18 = setConstr([97, 122]);
          var contrastPairsTable_10491264 = [{Field0: makeNimstrLit("navbar"), Field1: {Field0: makeNimstrLit("colorNavbarBackground"), Field1: makeNimstrLit("colorNavbarText")}}, {Field0: makeNimstrLit("body"), Field1: {Field0: makeNimstrLit("colorLight"), Field1: makeNimstrLit("colorTypographyBlack")}}, {Field0: makeNimstrLit("success"), Field1: {Field0: makeNimstrLit("colorSuccessBackground"), Field1: makeNimstrLit("colorSuccessText")}}, {Field0: makeNimstrLit("warning"), Field1: {Field0: makeNimstrLit("colorWarningBackground"), Field1: makeNimstrLit("colorWarningText")}}, {Field0: makeNimstrLit("buttons"), Field1: {Field0: makeNimstrLit("colorClickableBlue"), Field1: makeNimstrLit("colorDecorativeBlue")}}, {Field0: makeNimstrLit("grey 1"), Field1: {Field0: makeNimstrLit("colorLight"), Field1: makeNimstrLit("colorLightMedium")}}, {Field0: makeNimstrLit("grey 2"), Field1: {Field0: makeNimstrLit("colorLightMedium"), Field1: makeNimstrLit("colorMedium")}}, {Field0: makeNimstrLit("grey 3"), Field1: {Field0: makeNimstrLit("colorMedium"), Field1: makeNimstrLit("colorMediumDark")}}, {Field0: makeNimstrLit("grey 4"), Field1: {Field0: makeNimstrLit("colorMediumDark"), Field1: makeNimstrLit("colorDark")}}, {Field0: makeNimstrLit("success bg"), Field1: {Field0: makeNimstrLit("colorLight"), Field1: makeNimstrLit("colorSuccessBackground")}}, {Field0: makeNimstrLit("warning bg"), Field1: {Field0: makeNimstrLit("colorLight"), Field1: makeNimstrLit("colorWarningBackground")}}];
function eqStrings(a_1460222, b_1460223) {
        if (a_1460222 == b_1460223) return true;
    if (a_1460222 === null && b_1460223.length == 0) return true;
    if (b_1460223 === null && a_1460222.length == 0) return true;
    if ((!a_1460222) || (!b_1460223)) return false;
    var alen = a_1460222.length;
    if (alen != b_1460223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1460222[i] != b_1460223[i]) return false;
    return true;
  

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
function parseHex_9820019(s_9820022, number_9820024, number_9820024_Idx, start_9820025, maxLen_9820026) {
    var Tmp1;

  var result_9820027 = 0;

    var i_9820028 = start_9820025;
    var output_9820029 = 0;
    var foundDigit_9820030 = false;
    if ((maxLen_9820026 == 0)) {
    Tmp1 = (s_9820022).length;
    }
    else {
    Tmp1 = addInt(i_9820028, maxLen_9820026);
    }
    
    var last_9820031 = nimMin((s_9820022).length, Tmp1);
    if ((((addInt(i_9820028, 1) < last_9820031) && (s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)] == 48)) && (ConstSet8[s_9820022[chckIndx(addInt(i_9820028, 1), 0, (s_9820022).length-1)]] != undefined))) {
    i_9820028 = addInt(i_9820028, 2);
    }
    else {
    if (((i_9820028 < last_9820031) && (s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)] == 35))) {
    i_9820028 = addInt(i_9820028, 1);
    }
    }
    L2: do {
        L3: while (true) {
        if (!(i_9820028 < last_9820031)) break L3;
          switch (s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)]) {
          case 95:
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            output_9820029 = ((output_9820029 << 4) | subInt(s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)], 48));
            foundDigit_9820030 = true;
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
            output_9820029 = ((output_9820029 << 4) | addInt(subInt(s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)], 97), 10));
            foundDigit_9820030 = true;
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
            output_9820029 = ((output_9820029 << 4) | addInt(subInt(s_9820022[chckIndx(i_9820028, 0, (s_9820022).length-1)], 65), 10));
            foundDigit_9820030 = true;
            break;
          default: 
            break L2;
            break;
          }
          i_9820028 = addInt(i_9820028, 1);
        }
    } while(false);
    if (foundDigit_9820030) {
    number_9820024[number_9820024_Idx] = output_9820029;
    result_9820027 = subInt(i_9820028, start_9820025);
    }
    

  return result_9820027;

}
function nsuParseHexInt(s_9820017) {
      var Tmp1;

  var result_9820018 = [0];

    result_9820018[0] = 0;
    var L_9855030 = parseHex_9820019(s_9820017, result_9820018, 0, 0, 0);
      if (!((L_9855030 == (s_9820017).length))) Tmp1 = true; else {        Tmp1 = (L_9855030 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid hex integer: ") || []).concat(s_9820017 || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_9820018[0];

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function HEX5BHEX5D_3390283(s_3390287, x_3390289) {
  var result_3390290 = [];

    var a_3390401 = x_3390289.a;
    var L_3390601 = addInt(subInt(x_3390289.b, a_3390401), 1);
    result_3390290 = nimCopy(null, mnewString(chckRange(L_3390601, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_3390609 = 0;
      var i_10721539 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10721539 < L_3390601)) break L3;
            i_3390609 = i_10721539;
            result_3390290[chckIndx(i_3390609, 0, (result_3390290).length-1)] = s_3390287[chckIndx(addInt(i_3390609, a_3390401), 0, (s_3390287).length-1)];
            i_10721539 = addInt(i_10721539, 1);
          }
      } while(false);
    } while(false);

  return result_3390290;

}
function HEX2EHEX2E_3390220(a_3390225, b_3390227) {
  var result_3390229 = ({a: 0, b: 0});

    nimCopy(result_3390229, {a: a_3390225, b: b_3390227}, NTI2090020);

  return result_3390229;

}
function hexToRGB_10525051(s_10525053) {
    var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;

  var result_10525054 = ({r: 0.0, g: 0.0, b: 0.0});

      if (!(((s_10525053).length == 7))) Tmp8 = true; else {        Tmp8 = !((s_10525053[chckIndx(0, 0, (s_10525053).length-1)] == 35));      }      if (Tmp8) Tmp7 = true; else {        Tmp7 = !((ConstSet2[s_10525053[chckIndx(1, 0, (s_10525053).length-1)]] != undefined));      }      if (Tmp7) Tmp6 = true; else {        Tmp6 = !((ConstSet3[s_10525053[chckIndx(2, 0, (s_10525053).length-1)]] != undefined));      }      if (Tmp6) Tmp5 = true; else {        Tmp5 = !((ConstSet4[s_10525053[chckIndx(3, 0, (s_10525053).length-1)]] != undefined));      }      if (Tmp5) Tmp4 = true; else {        Tmp4 = !((ConstSet5[s_10525053[chckIndx(4, 0, (s_10525053).length-1)]] != undefined));      }      if (Tmp4) Tmp3 = true; else {        Tmp3 = !((ConstSet6[s_10525053[chckIndx(5, 0, (s_10525053).length-1)]] != undefined));      }      if (Tmp3) Tmp2 = true; else {        Tmp2 = !((ConstSet7[s_10525053[chckIndx(6, 0, (s_10525053).length-1)]] != undefined));      }    if (Tmp2) {
    if (true) {
    failedAssertImpl_1305480(makeNimstrLit("colorvisualization.nim(92, 12) `false` "));
    }
    
    Tmp1 = {r: 0.0, g: 0.0, b: 0.0};
    }
    else {
    Tmp1 = {r: nimCopy(null, chckRange((nsuParseHexInt(HEX5BHEX5D_3390283(s_10525053, HEX2EHEX2E_3390220(1, 2))) / 2.5600000000000000e+02), 0.0, 1.0000000000000000e+00), NTI10491039), g: nimCopy(null, chckRange((nsuParseHexInt(HEX5BHEX5D_3390283(s_10525053, HEX2EHEX2E_3390220(3, 4))) / 2.5600000000000000e+02), 0.0, 1.0000000000000000e+00), NTI10491039), b: nimCopy(null, chckRange((nsuParseHexInt(HEX5BHEX5D_3390283(s_10525053, HEX2EHEX2E_3390220(5, 6))) / 2.5600000000000000e+02), 0.0, 1.0000000000000000e+00), NTI10491039)};
    }
    
    nimCopy(result_10525054, Tmp1, NTI10491028);

  return result_10525054;

}
function max_10575350(x_10575354) {
  var result_10575355 = 0.0;

    result_10575355 = x_10575354[chckIndx(0, 0, (x_10575354).length-1)];
    L1: do {
      var i_10575369 = 0;
      var colontmp__10721545 = 0;
      colontmp__10721545 = ((x_10575354).length-1);
      var res_10721546 = 1;
      L2: do {
          L3: while (true) {
          if (!(res_10721546 <= colontmp__10721545)) break L3;
            i_10575369 = res_10721546;
            if ((result_10575355 < x_10575354[chckIndx(i_10575369, 0, (x_10575354).length-1)])) {
            result_10575355 = x_10575354[chckIndx(i_10575369, 0, (x_10575354).length-1)];
            }
            
            res_10721546 = addInt(res_10721546, 1);
          }
      } while(false);
    } while(false);

  return result_10575355;

}
function min_10575387(x_10575391) {
  var result_10575392 = 0.0;

    result_10575392 = x_10575391[chckIndx(0, 0, (x_10575391).length-1)];
    L1: do {
      var i_10575406 = 0;
      var colontmp__10721552 = 0;
      colontmp__10721552 = ((x_10575391).length-1);
      var res_10721553 = 1;
      L2: do {
          L3: while (true) {
          if (!(res_10721553 <= colontmp__10721552)) break L3;
            i_10575406 = res_10721553;
            if ((x_10575391[chckIndx(i_10575406, 0, (x_10575391).length-1)] < result_10575392)) {
            result_10575392 = x_10575391[chckIndx(i_10575406, 0, (x_10575391).length-1)];
            }
            
            res_10721553 = addInt(res_10721553, 1);
          }
      } while(false);
    } while(false);

  return result_10575392;

}
function HEX2AHEX3D_10590201(x_10590205, x_10590205_Idx, y_10590206) {
    x_10590205[x_10590205_Idx] = chckRange((x_10590205[x_10590205_Idx] * y_10590206), 0.0, 3.6000000000000000e+02);

  
}
function round_10590221(x_10590224, places_10590225) {
  var result_10590226 = 0.0;

    if ((places_10590225 == 0)) {
    result_10590226 = Math.round(x_10590224);
    }
    else {
      var mult_10590227 = Math.pow(1.0000000000000000e+01, places_10590225);
      result_10590226 = (Math.round((x_10590224 * mult_10590227)) / mult_10590227);
    }
    

  return result_10590226;

}
function round_10590241(x_10590244, places_10590245) {
  var result_10590246 = 0.0;

    if ((places_10590245 == 0)) {
    result_10590246 = Math.round(x_10590244);
    }
    else {
      var mult_10590247 = Math.pow(1.0000000000000000e+01, places_10590245);
      result_10590246 = (Math.round((x_10590244 * mult_10590247)) / mult_10590247);
    }
    

  return result_10590246;

}
function toHSL_10575343(c_10575345) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10575346 = ({h: 0.0, s: 0.0, l: 0.0});

    var maxValue_10575383 = max_10575350([nimCopy(null, c_10575345.r, NTI10491039), nimCopy(null, c_10575345.g, NTI10491039), nimCopy(null, c_10575345.b, NTI10491039)]);
    var minValue_10575420 = min_10575387([nimCopy(null, c_10575345.r, NTI10491039), nimCopy(null, c_10575345.g, NTI10491039), nimCopy(null, c_10575345.b, NTI10491039)]);
    result_10575346.l = chckRange(((minValue_10575420 + maxValue_10575383) / 2.0000000000000000e+00), 0.0, 1.0000000000000000e+00);
    if ((maxValue_10575383 == minValue_10575420)) {
    result_10575346.s = 0;
    result_10575346.h = 0;
    }
    else {
      var chroma_10575421 = (maxValue_10575383 - minValue_10575420);
      if ((5.0000000000000000e-01 <= result_10575346.l)) {
      Tmp1 = (chroma_10575421 / ((2.0000000000000000e+00 - maxValue_10575383) - minValue_10575420));
      }
      else {
      Tmp1 = (chroma_10575421 / (maxValue_10575383 + minValue_10575420));
      }
      
      result_10575346.s = chckRange(Tmp1, 0.0, 1.0000000000000000e+00);
      if ((maxValue_10575383 == c_10575345.r)) {
      if ((c_10575345.g < c_10575345.b)) {
      Tmp3 = 6.0000000000000000e+00;
      }
      else {
      Tmp3 = 0.0;
      }
      
      Tmp2 = (((c_10575345.g - c_10575345.b) / chroma_10575421) + Tmp3);
      }
      else {
      if ((maxValue_10575383 == c_10575345.g)) {
      Tmp2 = (((c_10575345.b - c_10575345.r) / chroma_10575421) + 2.0000000000000000e+00);
      }
      else {
      if ((maxValue_10575383 == c_10575345.b)) {
      Tmp2 = (((c_10575345.r - c_10575345.g) / chroma_10575421) + 4.0000000000000000e+00);
      }
      else {
        if (true) {
        failedAssertImpl_1305480(makeNimstrLit("colorvisualization.nim(120, 20) `false` "));
        }
        
      Tmp2 = 0.0;
      }
      }}
      result_10575346.h = chckRange(Tmp2, 0.0, 3.6000000000000000e+02);
      HEX2AHEX3D_10590201(result_10575346, "h", 60);
      result_10575346.h = round_10590221(chckRange(result_10575346.h, 0.0, 3.6000000000000000e+02), 1);
      result_10575346.s = round_10590241(chckRange(result_10575346.s, 0.0, 1.0000000000000000e+00), 3);
      result_10575346.l = round_10590241(chckRange(result_10575346.l, 0.0, 1.0000000000000000e+00), 3);
    }
    

  return result_10575346;

}
function findReferenceValues_10491072(wp_10491074) {
  var result_10491075 = ({x: 0.0, y: 0.0, z: 0.0, wp: 0});

  BeforeRet: do {
    L1: do {
      var rv_10491141 = ({x: 0.0, y: 0.0, z: 0.0, wp: 0});
      var i_10721563 = 0;
      if ((i_10721563 <= 0)) {
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            nimCopy(rv_10491141, referenceValues_10491080[chckIndx(i_10721563, 0, (referenceValues_10491080).length-1)], NTI10491034);
            if ((rv_10491141.wp == wp_10491074)) {
            nimCopy(result_10491075, rv_10491141, NTI10491034);
            break BeforeRet;
            }
            
            if ((0 <= i_10721563)) {
            break L2;
            }
            
            i_10721563 = addInt(i_10721563, 1);
          }
      } while(false);
      }
      
    } while(false);
  } while (false);

  return result_10491075;

}
function round_10635004(x_10635007, places_10635008) {
  var result_10635009 = 0.0;

    if ((places_10635008 == 0)) {
    result_10635009 = Math.round(x_10635007);
    }
    else {
      var mult_10635010 = Math.pow(1.0000000000000000e+01, places_10635008);
      result_10635009 = (Math.round((x_10635007 * mult_10635010)) / mult_10635010);
    }
    

  return result_10635009;

}
function round_10590332(x_10590335, places_10590336) {
  var result_10590337 = 0.0;

    if ((places_10590336 == 0)) {
    result_10590337 = Math.round(x_10590335);
    }
    else {
      var mult_10590338 = Math.pow(1.0000000000000000e+01, places_10590336);
      result_10590337 = (Math.round((x_10590335 * mult_10590338)) / mult_10590338);
    }
    

  return result_10590337;

}
function toLab_10620029(c_10620031) {
    var Tmp1;
    var Tmp2;
    var Tmp3;

  var result_10620032 = ({l: 0.0, a: 0.0, b: 0.0, wp: 0});

    var rv_10620033 = findReferenceValues_10491072(c_10620031.wp);
    var x_10620034 = (c_10620031.x / rv_10620033.x);
    var y_10620035 = (c_10620031.y / rv_10620033.y);
    var z_10620036 = (c_10620031.z / rv_10620033.z);
    if ((8.8559999999999993e-03 < x_10620034)) {
    Tmp1 = Math.pow(x_10620034, 3.3333333333333331e-01);
    }
    else {
    Tmp1 = ((7.7869999999999999e+00 * x_10620034) + 1.3793103448275862e-01);
    }
    
    x_10620034 = Tmp1;
    if ((8.8559999999999993e-03 < y_10620035)) {
    Tmp2 = Math.pow(y_10620035, 3.3333333333333331e-01);
    }
    else {
    Tmp2 = ((7.7869999999999999e+00 * y_10620035) + 1.3793103448275862e-01);
    }
    
    y_10620035 = Tmp2;
    if ((8.8559999999999993e-03 < z_10620036)) {
    Tmp3 = Math.pow(z_10620036, 3.3333333333333331e-01);
    }
    else {
    Tmp3 = ((7.7869999999999999e+00 * z_10620036) + 1.3793103448275862e-01);
    }
    
    z_10620036 = Tmp3;
    result_10620032.l = chckRange(((1.1600000000000000e+02 * y_10620035) - 1.6000000000000000e+01), 0.0, 1.0000000000000000e+02);
    result_10620032.a = (5.0000000000000000e+02 * (x_10620034 - y_10620035));
    result_10620032.b = (2.0000000000000000e+02 * (y_10620035 - z_10620036));
    result_10620032.l = round_10635004(chckRange(result_10620032.l, 0.0, 1.0000000000000000e+02), 3);
    result_10620032.a = round_10590332(result_10620032.a, 3);
    result_10620032.b = round_10590332(result_10620032.b, 3);

  return result_10620032;

}
function HEX2AHEX3D_10240001(x_10240005, x_10240005_Idx, y_10240006) {
    x_10240005[x_10240005_Idx] = (x_10240005[x_10240005_Idx] * y_10240006);

  
}
function toXYZ_10590375(c_10590377) {
    var Tmp1;
    var Tmp2;
    var Tmp3;

  var result_10590378 = ({x: 0.0, y: 0.0, z: 0.0, wp: 0});

    var r_10590379 = [c_10590377.r];
    var g_10590380 = [c_10590377.g];
    var b_10590381 = [c_10590377.b];
    if ((4.0450000000000000e-02 < r_10590379[0])) {
    Tmp1 = Math.pow(((r_10590379[0] + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp1 = (r_10590379[0] / 1.2920000000000000e+01);
    }
    
    r_10590379[0] = Tmp1;
    if ((4.0450000000000000e-02 < g_10590380[0])) {
    Tmp2 = Math.pow(((g_10590380[0] + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp2 = (g_10590380[0] / 1.2920000000000000e+01);
    }
    
    g_10590380[0] = Tmp2;
    if ((4.0450000000000000e-02 < b_10590381[0])) {
    Tmp3 = Math.pow(((b_10590381[0] + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp3 = (b_10590381[0] / 1.2920000000000000e+01);
    }
    
    b_10590381[0] = Tmp3;
    HEX2AHEX3D_10240001(r_10590379, 0, 1.0000000000000000e+02);
    HEX2AHEX3D_10240001(g_10590380, 0, 1.0000000000000000e+02);
    HEX2AHEX3D_10240001(b_10590381, 0, 1.0000000000000000e+02);
    result_10590378.x = (((r_10590379[0] * 4.1239999999999999e-01) + (g_10590380[0] * 3.5759999999999997e-01)) + (b_10590381[0] * 1.8049999999999999e-01));
    result_10590378.y = (((r_10590379[0] * 2.1260000000000001e-01) + (g_10590380[0] * 7.1519999999999995e-01)) + (b_10590381[0] * 7.2200000000000000e-02));
    result_10590378.z = (((r_10590379[0] * 1.9300000000000001e-02) + (g_10590380[0] * 1.1920000000000000e-01)) + (b_10590381[0] * 9.5050000000000001e-01));
    result_10590378.x = round_10590332(result_10590378.x, 3);
    result_10590378.y = round_10590332(result_10590378.y, 3);
    result_10590378.z = round_10590332(result_10590378.z, 3);
    result_10590378.wp = 0;

  return result_10590378;

}
function nsuFindChar(s_10065216, sub_10065217, start_10065218, last_10065219) {
    var Tmp1;

  var result_10065221 = 0;

  BeforeRet: do {
    if ((last_10065219 == 0)) {
    Tmp1 = ((s_10065216).length-1);
    }
    else {
    Tmp1 = last_10065219;
    }
    
    var last_10065223 = Tmp1;
    L2: do {
      var i_10065606 = 0;
      var colontmp__10721584 = 0;
      colontmp__10721584 = start_10065218;
      var res_10721585 = colontmp__10721584;
      L3: do {
          L4: while (true) {
          if (!(res_10721585 <= last_10065223)) break L4;
            i_10065606 = res_10721585;
            if ((sub_10065217 == s_10065216[chckIndx(i_10065606, 0, (s_10065216).length-1)])) {
            result_10065221 = i_10065606;
            break BeforeRet;
            }
            
            res_10721585 = addInt(res_10721585, 1);
          }
      } while(false);
    } while(false);
    result_10065221 = -1;
    break BeforeRet;
  } while (false);

  return result_10065221;

}
function substr_1571022(s_1571024, first_1571025, last_1571026) {
  var result_1571027 = [];

    var first_1571028 = nimMax(first_1571025, 0);
    var L_1571030 = nimMax(addInt(subInt(nimMin(last_1571026, ((s_1571024).length-1)), first_1571028), 1), 0);
    result_1571027 = nimCopy(null, mnewString(chckRange(L_1571030, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_1571039 = 0;
      var colontmp__10721591 = 0;
      colontmp__10721591 = subInt(L_1571030, 1);
      var res_10721592 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10721592 <= colontmp__10721591)) break L3;
            i_1571039 = res_10721592;
            result_1571027[chckIndx(i_1571039, 0, (result_1571027).length-1)] = s_1571024[chckIndx(addInt(i_1571039, first_1571028), 0, (s_1571024).length-1)];
            res_10721592 = addInt(res_10721592, 1);
          }
      } while(false);
    } while(false);

  return result_1571027;

}
function substr_1571053(s_1571055, first_1571056) {
  var result_1571058 = [];

    result_1571058 = nimCopy(null, substr_1571022(s_1571055, first_1571056, ((s_1571055).length-1)), NTI1188013);

  return result_1571058;

}
function nsuInitSkipTable(a_10060081, sub_10060082) {
    var m_10060083 = (sub_10060082).length;
    var i_10060085 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10060085 <= 248)) break L2;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 0), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 1), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 2), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 3), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 4), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 5), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 6), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          a_10060081[chckIndx(chckRange(addInt(i_10060085, 7), 0, 255), 0, (a_10060081).length-1)] = m_10060083;
          i_10060085 = addInt(i_10060085, 8);
        }
    } while(false);
    L3: do {
      var i_10060101 = 0;
      var colontmp__10721599 = 0;
      colontmp__10721599 = subInt(m_10060083, 1);
      var i_10721600 = 0;
      L4: do {
          L5: while (true) {
          if (!(i_10721600 < colontmp__10721599)) break L5;
            i_10060101 = i_10721600;
            a_10060081[chckIndx(sub_10060082[chckIndx(i_10060101, 0, (sub_10060082).length-1)], 0, (a_10060081).length-1)] = subInt(subInt(m_10060083, 1), i_10060101);
            i_10721600 = addInt(i_10721600, 1);
          }
      } while(false);
    } while(false);

  
}
function nsuFindStrA(a_10060117, s_10060118, sub_10060119, start_10060120, last_10060121) {
    var Tmp1;

  var result_10060123 = 0;

  BeforeRet: do {
    if ((last_10060121 == 0)) {
    Tmp1 = ((s_10060118).length-1);
    }
    else {
    Tmp1 = last_10060121;
    }
    
    var last_10060125 = Tmp1;
    var subLast_10060126 = subInt((sub_10060119).length, 1);
    if ((subLast_10060126 == -1)) {
    result_10060123 = start_10060120;
    break BeforeRet;
    }
    
    var skip_10060127 = start_10060120;
    L2: do {
        L3: while (true) {
        if (!(subLast_10060126 <= subInt(last_10060125, skip_10060127))) break L3;
          var i_10065001 = subLast_10060126;
          L4: do {
              L5: while (true) {
              if (!(s_10060118[chckIndx(addInt(skip_10060127, i_10065001), 0, (s_10060118).length-1)] == sub_10060119[chckIndx(i_10065001, 0, (sub_10060119).length-1)])) break L5;
                if ((i_10065001 == 0)) {
                result_10060123 = skip_10060127;
                break BeforeRet;
                }
                
                i_10065001 = subInt(i_10065001, 1);
              }
          } while(false);
          skip_10060127 = addInt(skip_10060127, a_10060117[chckIndx(s_10060118[chckIndx(addInt(skip_10060127, subLast_10060126), 0, (s_10060118).length-1)], 0, (a_10060117).length-1)]);
        }
    } while(false);
    result_10060123 = -1;
    break BeforeRet;
  } while (false);

  return result_10060123;

}
function nsuReplaceStr(s_10135016, sub_10135017, by_10135018) {
  var result_10135019 = [];

    result_10135019 = nimCopy(null, [], NTI1188013);
    var subLen_10135020 = (sub_10135017).length;
    if ((subLen_10135020 == 0)) {
    result_10135019 = nimCopy(null, s_10135016, NTI1188013);
    }
    else {
    if ((subLen_10135020 == 1)) {
    var c_10135021 = sub_10135017[chckIndx(0, 0, (sub_10135017).length-1)];
    var last_10135023 = ((s_10135016).length-1);
    var i_10135025 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var j_10135026 = nsuFindChar(s_10135016, c_10135021, chckRange(i_10135025, 0, 2147483647), last_10135023);
          if ((j_10135026 < 0)) {
          break L1;
          }
          
          result_10135019.push.apply(result_10135019, substr_1571022(s_10135016, i_10135025, subInt(j_10135026, 1)));;
          result_10135019.push.apply(result_10135019, by_10135018);;
          i_10135025 = addInt(j_10135026, subLen_10135020);
        }
    } while(false);
    result_10135019.push.apply(result_10135019, substr_1571053(s_10135016, i_10135025));;
    }
    else {
      var a_10135027 = [new Int32Array(256)];
      nsuInitSkipTable(a_10135027[0], sub_10135017);
      var last_10135030 = ((s_10135016).length-1);
      var i_10135032 = 0;
      L3: do {
          L4: while (true) {
          if (!true) break L4;
            var j_10135033 = nsuFindStrA(a_10135027[0], s_10135016, sub_10135017, chckRange(i_10135032, 0, 2147483647), last_10135030);
            if ((j_10135033 < 0)) {
            break L3;
            }
            
            result_10135019.push.apply(result_10135019, substr_1571022(s_10135016, i_10135032, subInt(j_10135033, 1)));;
            result_10135019.push.apply(result_10135019, by_10135018);;
            i_10135032 = addInt(j_10135033, subLen_10135020);
          }
      } while(false);
      result_10135019.push.apply(result_10135019, substr_1571053(s_10135016, i_10135032));;
    }
    }

  return result_10135019;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1194635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function parseSaturatedNatural_2430017(s_2430019, b_2430021, b_2430021_Idx, start_2430022) {
      var Tmp1;
          var Tmp4;

  var result_2430024 = 0;

    var i_2430025 = start_2430022;
    if (((i_2430025 < (s_2430019).length) && (s_2430019[chckIndx(i_2430025, 0, (s_2430019).length-1)] == 43))) {
    i_2430025 = addInt(i_2430025, 1);
    }
    
      if (!(i_2430025 < (s_2430019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet13[s_2430019[chckIndx(i_2430025, 0, (s_2430019).length-1)]] != undefined);      }    if (Tmp1) {
    b_2430021[b_2430021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2430025 < (s_2430019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet14[s_2430019[chckIndx(i_2430025, 0, (s_2430019).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_2440016 = subInt(s_2430019[chckIndx(i_2430025, 0, (s_2430019).length-1)], 48);
          if ((b_2430021[b_2430021_Idx] <= divInt(subInt(2147483647, c_2440016), 10))) {
          b_2430021[b_2430021_Idx] = addInt(mulInt(b_2430021[b_2430021_Idx], 10), c_2440016);
          }
          else {
            b_2430021[b_2430021_Idx] = 2147483647;
          }
          
          i_2430025 = addInt(i_2430025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_2430025 < (s_2430019).length) && (s_2430019[chckIndx(i_2430025, 0, (s_2430019).length-1)] == 95))) break L6;
                i_2430025 = addInt(i_2430025, 1);
              }
          } while(false);
        }
    } while(false);
    result_2430024 = subInt(i_2430025, start_2430022);
    }
    

  return result_2430024;

}
function HEX5BHEX5D_5840068(s_5840072, x_5840074) {
  var result_5840075 = [];

    var a_5840201 = x_5840074.a;
    var L_5840401 = addInt(subInt(subInt((s_5840072).length, x_5840074.b), a_5840201), 1);
    result_5840075 = nimCopy(null, mnewString(chckRange(L_5840401, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_5840409 = 0;
      var i_10721619 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10721619 < L_5840401)) break L3;
            i_5840409 = i_10721619;
            result_5840075[chckIndx(i_5840409, 0, (result_5840075).length-1)] = s_5840072[chckIndx(addInt(i_5840409, a_5840201), 0, (s_5840072).length-1)];
            i_10721619 = addInt(i_10721619, 1);
          }
      } while(false);
    } while(false);

  return result_5840075;

}
function HEX2EHEX2E_5840001(a_5840006, b_5840008) {
  var result_5840014 = ({a: 0, b: 0});

    nimCopy(result_5840014, {a: a_5840006, b: b_5840008}, NTI5840011);

  return result_5840014;

}
function parseStandardFormatSpecifier_10375322(s_10375324, start_10375325, ignoreUnknownSuffix_10375327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10375328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_10375328.fill = 32;
    result_10375328.align = 0;
    result_10375328.sign = 45;
    var i_10375331 = start_10375325;
    if (((addInt(i_10375331, 1) < (s_10375324).length) && (ConstSet9[s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.fill = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    result_10375328.align = s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 2);
    }
    else {
    if (((i_10375331 < (s_10375324).length) && (ConstSet10[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.align = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    }
    if (((i_10375331 < (s_10375324).length) && (ConstSet11[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.sign = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    
    if (((i_10375331 < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 35))) {
    result_10375328.alternateForm = true;
    i_10375331 = addInt(i_10375331, 1);
    }
    
      if (!((addInt(i_10375331, 1) < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet12[s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)]] != undefined);      }    if (Tmp1) {
    result_10375328.padWithZero = true;
    i_10375331 = addInt(i_10375331, 1);
    }
    
    var parsedLength_10395015 = parseSaturatedNatural_2430017(s_10375324, result_10375328, "minimumWidth", i_10375331);
    i_10375331 = addInt(i_10375331, parsedLength_10395015);
    if (((i_10375331 < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 46))) {
    i_10375331 = addInt(i_10375331, 1);
    var parsedLengthB_10395029 = parseSaturatedNatural_2430017(s_10375324, result_10375328, "precision", i_10375331);
    i_10375331 = addInt(i_10375331, parsedLengthB_10395029);
    }
    else {
      result_10375328.precision = -1;
    }
    
      if (!(i_10375331 < (s_10375324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet15[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined);      }    if (Tmp2) {
    result_10375328.typ = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    
    result_10375328.endPosition = i_10375331;
      if (!!((i_10375331 == (s_10375324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_10375327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5840068(s_10375324, HEX2EHEX2E_5840001(i_10375331, 1)) || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_10375328;

}
function nsuformatBiggestFloat(f_10205221, format_10205222, precision_10205227, decimalSep_10205228) {
  var result_10205229 = [];

    var precision_10205401 = precision_10205227;
    if ((precision_10205401 == -1)) {
    precision_10205401 = 6;
    }
    
    var res_10205402 = null;
    switch (format_10205222) {
    case 0:
      res_10205402 = f_10205221.toString();
      break;
    case 1:
      res_10205402 = f_10205221.toFixed(precision_10205401);
      break;
    case 2:
      res_10205402 = f_10205221.toExponential(precision_10205401);
      break;
    }
    result_10205229 = nimCopy(null, cstrToNimstr(res_10205402), NTI1188013);
    if (((1.0000000000000000e+00 / f_10205221) == -Infinity)) {
    result_10205229 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_10205402) || []), NTI1188013);
    }
    
    L1: do {
      var i_10205410 = 0;
      var colontmp__10721624 = 0;
      colontmp__10721624 = (result_10205229).length;
      var i_10721625 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10721625 < colontmp__10721624)) break L3;
            i_10205410 = i_10721625;
            if ((ConstSet16[result_10205229[chckIndx(i_10205410, 0, (result_10205229).length-1)]] != undefined)) {
            result_10205229[chckIndx(i_10205410, 0, (result_10205229).length-1)] = decimalSep_10205228;
            }
            
            i_10721625 = addInt(i_10721625, 1);
          }
      } while(false);
    } while(false);

  return result_10205229;

}
function insert_1565401(x_1565404, x_1565404_Idx, item_1565405, i_1565406) {
    var xl_1565407 = (x_1565404[x_1565404_Idx]).length;
    (x_1565404[x_1565404_Idx].length = chckRange(addInt(xl_1565407, (item_1565405).length), 0, 2147483647));
    var j_1565408 = subInt(xl_1565407, 1);
    L1: do {
        L2: while (true) {
        if (!(i_1565406 <= j_1565408)) break L2;
          x_1565404[x_1565404_Idx][chckIndx(addInt(j_1565408, (item_1565405).length), 0, (x_1565404[x_1565404_Idx]).length-1)] = x_1565404[x_1565404_Idx][chckIndx(j_1565408, 0, (x_1565404[x_1565404_Idx]).length-1)];
          j_1565408 = subInt(j_1565408, 1);
        }
    } while(false);
    j_1565408 = 0;
    L3: do {
        L4: while (true) {
        if (!(j_1565408 < (item_1565405).length)) break L4;
          x_1565404[x_1565404_Idx][chckIndx(addInt(j_1565408, i_1565406), 0, (x_1565404[x_1565404_Idx]).length-1)] = item_1565405[chckIndx(j_1565408, 0, (item_1565405).length-1)];
          j_1565408 = addInt(j_1565408, 1);
        }
    } while(false);

  
}
function nsuRepeatChar(c_9890124, count_9890125) {
  var result_9890126 = [];

    result_9890126 = nimCopy(null, mnewString(count_9890125), NTI1188013);
    L1: do {
      var i_9890135 = 0;
      var colontmp__10721630 = 0;
      colontmp__10721630 = subInt(count_9890125, 1);
      var res_10721631 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10721631 <= colontmp__10721630)) break L3;
            i_9890135 = res_10721631;
            result_9890126[chckIndx(i_9890135, 0, (result_9890126).length-1)] = c_9890124;
            res_10721631 = addInt(res_10721631, 1);
          }
      } while(false);
    } while(false);

  return result_9890126;

}
function validateUtf8_2755244(s_2755246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2755247 = 0;

  BeforeRet: do {
    var i_2755249 = 0;
    var L_2755250 = (s_2755246).length;
    L1: do {
        L2: while (true) {
        if (!(i_2755249 < L_2755250)) break L2;
          if ((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] <= 127)) {
          i_2755249 = addInt(i_2755249, 1);
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 5) == 6)) {
          if ((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] < 194)) {
          result_2755247 = i_2755249;
          break BeforeRet;
          }
          
            if (!(addInt(i_2755249, 1) < L_2755250)) Tmp3 = false; else {              Tmp3 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2755249 = addInt(i_2755249, 2);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2755249, 2) < L_2755250)) Tmp5 = false; else {              Tmp5 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2755246[chckIndx(addInt(i_2755249, 2), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2755249 = addInt(i_2755249, 3);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2755249, 3) < L_2755250)) Tmp8 = false; else {              Tmp8 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2755246[chckIndx(addInt(i_2755249, 2), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2755246[chckIndx(addInt(i_2755249, 3), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2755249 = addInt(i_2755249, 4);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2755247 = -1;
    break BeforeRet;
  } while (false);

  return result_2755247;

}
function nucruneLen(s_2512025) {
  var result_2512026 = 0;

    result_2512026 = 0;
    var i_2512028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2512028 < (s_2512025).length)) break L2;
          if ((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] <= 127)) {
          i_2512028 = addInt(i_2512028, 1);
          }
          else {
          if ((((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] >>> 0) >>> 5) == 6)) {
          i_2512028 = addInt(i_2512028, 2);
          }
          else {
          if ((((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] >>> 0) >>> 4) == 14)) {
          i_2512028 = addInt(i_2512028, 3);
          }
          else {
          if ((((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] >>> 0) >>> 3) == 30)) {
          i_2512028 = addInt(i_2512028, 4);
          }
          else {
          if ((((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] >>> 0) >>> 2) == 62)) {
          i_2512028 = addInt(i_2512028, 5);
          }
          else {
          if ((((s_2512025[chckIndx(i_2512028, 0, (s_2512025).length-1)] >>> 0) >>> 1) == 126)) {
          i_2512028 = addInt(i_2512028, 6);
          }
          else {
          i_2512028 = addInt(i_2512028, 1);
          }
          }}}}}
          result_2512026 = addInt(result_2512026, 1);
        }
    } while(false);

  return result_2512026;

}
function alignString_10375222(s_10375224, minimumWidth_10375225, align_10375226, fill_10375227) {
      var Tmp1;

  var result_10375228 = [];

    if ((minimumWidth_10375225 == 0)) {
    result_10375228 = nimCopy(null, s_10375224, NTI1188013);
    }
    else {
      if ((validateUtf8_2755244(s_10375224) == -1)) {
      Tmp1 = nucruneLen(s_10375224);
      }
      else {
      Tmp1 = (s_10375224).length;
      }
      
      var sRuneLen_10375229 = Tmp1;
      var toFill_10375230 = subInt(minimumWidth_10375225, sRuneLen_10375229);
      if ((toFill_10375230 <= 0)) {
      result_10375228 = nimCopy(null, s_10375224, NTI1188013);
      }
      else {
      if (((align_10375226 == 60) || (align_10375226 == 0))) {
      result_10375228 = nimCopy(null, (s_10375224 || []).concat(nsuRepeatChar(fill_10375227, chckRange(toFill_10375230, 0, 2147483647)) || []), NTI1188013);
      }
      else {
      if ((align_10375226 == 94)) {
      var half_10375231 = divInt(toFill_10375230, 2);
      result_10375228 = nimCopy(null, (nsuRepeatChar(fill_10375227, chckRange(half_10375231, 0, 2147483647)) || []).concat(s_10375224 || [],nsuRepeatChar(fill_10375227, chckRange(subInt(toFill_10375230, half_10375231), 0, 2147483647)) || []), NTI1188013);
      }
      else {
        result_10375228 = nimCopy(null, (nsuRepeatChar(fill_10375227, chckRange(toFill_10375230, 0, 2147483647)) || []).concat(s_10375224 || []), NTI1188013);
      }
      }}
    }
    

  return result_10375228;

}
function nsuToUpperAsciiChar(c_9380016) {
  var result_9380017 = 0;

    if ((ConstSet18[c_9380016] != undefined)) {
    result_9380017 = chckRange(subInt(c_9380016, 32), 0, 255);
    }
    else {
      result_9380017 = c_9380016;
    }
    

  return result_9380017;

}
function nsuToUpperAsciiStr(s_9385037) {
  var result_9385038 = [];

    result_9385038 = nimCopy(null, mnewString(chckRange((s_9385037).length, 0, 2147483647)), NTI1188013);
    L1: do {
      var iHEX60gensym11_9390009 = 0;
      var colontmp__10721656 = 0;
      colontmp__10721656 = subInt((s_9385037).length, 1);
      var res_10721657 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10721657 <= colontmp__10721656)) break L3;
            iHEX60gensym11_9390009 = res_10721657;
            result_9385038[chckIndx(iHEX60gensym11_9390009, 0, (result_9385038).length-1)] = nsuToUpperAsciiChar(s_9385037[chckIndx(iHEX60gensym11_9390009, 0, (s_9385037).length-1)]);
            res_10721657 = addInt(res_10721657, 1);
          }
      } while(false);
    } while(false);

  return result_9385038;

}
function formatValue_10505002(result_10505005, result_10505005_Idx, value_10505006, specifier_10505007) {
    var Tmp1;

  BeforeRet: do {
    if (((specifier_10505007).length == 0)) {
    result_10505005[result_10505005_Idx].push.apply(result_10505005[result_10505005_Idx], cstrToNimstr(nimFloatToString(value_10505006)));;
    break BeforeRet;
    }
    
    var spec_10505008 = parseStandardFormatSpecifier_10375322(specifier_10505007, 0, false);
    var fmode_10505009 = 0;
    switch (spec_10505008.typ) {
    case 101:
    case 69:
      fmode_10505009 = 2;
      break;
    case 102:
    case 70:
      fmode_10505009 = 1;
      break;
    case 103:
    case 71:
      fmode_10505009 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_10505008.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_10510002 = [nsuformatBiggestFloat(value_10505006, fmode_10505009, chckRange(spec_10505008.precision, -1, 32), 46)];
    var sign_10510003 = false;
    if ((0.0 <= value_10505006)) {
    if (!((spec_10505008.sign == 45))) {
    sign_10510003 = true;
    if ((value_10505006 == 0.0)) {
    if (((1.0000000000000000e+00 / value_10505006) == Infinity)) {
    insert_1565401(f_10510002, 0, nimCharToStr(spec_10505008.sign), 0);
    }
    
    }
    else {
    insert_1565401(f_10510002, 0, nimCharToStr(spec_10505008.sign), 0);
    }
    
    }
    
    }
    else {
      sign_10510003 = true;
    }
    
    if (spec_10505008.padWithZero) {
    var signStr_10510006 = [];
    if (sign_10510003) {
    signStr_10510006 = nimCopy(null, nimCharToStr(f_10510002[0][chckIndx(0, 0, (f_10510002[0]).length-1)]), NTI1188013);
    f_10510002[0] = nimCopy(null, HEX5BHEX5D_5840068(f_10510002[0], HEX2EHEX2E_5840001(1, 1)), NTI1188013);
    }
    
    var toFill_10520040 = subInt(subInt(spec_10505008.minimumWidth, (f_10510002[0]).length), (sign_10510003 ? 1:0));
    if ((0 < toFill_10520040)) {
    f_10510002[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_10520040, 0, 2147483647)) || []).concat(f_10510002[0] || []), NTI1188013);
    }
    
    if (sign_10510003) {
    f_10510002[0] = nimCopy(null, (signStr_10510006 || []).concat(f_10510002[0] || []), NTI1188013);
    }
    
    }
    
    if ((spec_10505008.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_10505008.align;
    }
    
    var align_10520041 = Tmp1;
    var res_10520042 = alignString_10375222(f_10510002[0], spec_10505008.minimumWidth, align_10520041, spec_10505008.fill);
    if ((ConstSet17[spec_10505008.typ] != undefined)) {
    result_10505005[result_10505005_Idx].push.apply(result_10505005[result_10505005_Idx], nsuToUpperAsciiStr(res_10520042));;
    }
    else {
    result_10505005[result_10505005_Idx].push.apply(result_10505005[result_10505005_Idx], res_10520042);;
    }
    
  } while (false);

  
}
function HEX24_10500049(c_10500051) {
  var result_10500052 = [];

    var fmtRes_10500053 = [mnewString(0)];
    formatValue_10505002(fmtRes_10500053, 0, c_10500051.h, makeNimstrLit(">5.1f"));
    fmtRes_10500053[0].push.apply(fmtRes_10500053[0], makeNimstrLit("\xC2\xB0, "));;
    formatValue_10505002(fmtRes_10500053, 0, c_10500051.s, makeNimstrLit(">3.1f"));
    fmtRes_10500053[0].push.apply(fmtRes_10500053[0], makeNimstrLit(", "));;
    formatValue_10505002(fmtRes_10500053, 0, c_10500051.l, makeNimstrLit(">3.1f"));
    result_10500052 = nimCopy(null, nsuReplaceStr(fmtRes_10500053[0], makeNimstrLit(" "), makeNimstrLit("&nbsp;")), NTI1188013);

  return result_10500052;

}
function HEX24_10520121(c_10520123) {
  var result_10520124 = [];

    var fmtRes_10520125 = [mnewString(0)];
    formatValue_10505002(fmtRes_10520125, 0, c_10520123.l, makeNimstrLit(">5.1f"));
    fmtRes_10520125[0].push.apply(fmtRes_10520125[0], makeNimstrLit(", "));;
    formatValue_10505002(fmtRes_10520125, 0, c_10520123.a, makeNimstrLit(">5.1f"));
    fmtRes_10520125[0].push.apply(fmtRes_10520125[0], makeNimstrLit(", "));;
    formatValue_10505002(fmtRes_10520125, 0, c_10520123.b, makeNimstrLit(">5.1f"));
    result_10520124 = nimCopy(null, nsuReplaceStr(fmtRes_10520125[0], makeNimstrLit(" "), makeNimstrLit("&nbsp;")), NTI1188013);

  return result_10520124;

}
function runeLenAt_2512127(s_2512129, i_2512130) {
  var result_2512131 = 0;

    if ((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] <= 127)) {
    result_2512131 = 1;
    }
    else {
    if ((((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] >>> 0) >>> 5) == 6)) {
    result_2512131 = 2;
    }
    else {
    if ((((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] >>> 0) >>> 4) == 14)) {
    result_2512131 = 3;
    }
    else {
    if ((((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] >>> 0) >>> 3) == 30)) {
    result_2512131 = 4;
    }
    else {
    if ((((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] >>> 0) >>> 2) == 62)) {
    result_2512131 = 5;
    }
    else {
    if ((((s_2512129[chckIndx(i_2512130, 0, (s_2512129).length-1)] >>> 0) >>> 1) == 126)) {
    result_2512131 = 6;
    }
    else {
      result_2512131 = 1;
    }
    }}}}}

  return result_2512131;

}
function runeOffset_3135259(s_3135261, pos_3135262, start_3135263) {
  var result_3135264 = 0;

  BeforeRet: do {
    var i_3135266 = 0;
    var o_3135267 = start_3135263;
    L1: do {
        L2: while (true) {
        if (!(i_3135266 < pos_3135262)) break L2;
          o_3135267 = addInt(o_3135267, chckRange(runeLenAt_2512127(s_3135261, o_3135267), 0, 2147483647));
          if (((s_3135261).length <= o_3135267)) {
          result_3135264 = -1;
          break BeforeRet;
          }
          
          i_3135266 = addInt(i_3135266, 1);
        }
    } while(false);
    result_3135264 = o_3135267;
    break BeforeRet;
  } while (false);

  return result_3135264;

}
function formatValue_10420080(result_10420083, result_10420083_Idx, value_10420084, specifier_10420085) {
    var spec_10420086 = parseStandardFormatSpecifier_10375322(specifier_10420085, 0, false);
    var value_10420087 = nimCopy(null, value_10420084, NTI1188013);
    switch (spec_10420086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10420086.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_10420086.precision == -1))) {
    if ((spec_10420086.precision < nucruneLen(value_10420087))) {
    (value_10420087.length = chckRange(runeOffset_3135259(value_10420087, chckRange(spec_10420086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_10420083[result_10420083_Idx].push.apply(result_10420083[result_10420083_Idx], alignString_10375222(value_10420087, spec_10420086.minimumWidth, spec_10420086.align, spec_10420086.fill));;

  
}
function toHexImpl_9710241(x_9710243, len_9710244, handleNegative_9710245) {
  var result_9710246 = [];

    var n_9710248 = x_9710243;
    result_9710246 = nimCopy(null, mnewString(len_9710244), NTI1188013);
    L1: do {
      var j_9710255 = 0;
      var colontmp__10721676 = 0;
      colontmp__10721676 = subInt(len_9710244, 1);
      var res_10721681 = colontmp__10721676;
      L2: do {
          L3: while (true) {
          if (!(0 <= res_10721681)) break L3;
            j_9710255 = res_10721681;
            result_9710246[chckIndx(j_9710255, 0, (result_9710246).length-1)] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9710248 & 15), 0, (makeNimstrLit("0123456789ABCDEF")).length-1)];
            n_9710248 = ((n_9710248 >>> 0) >>> 4);
            if (((n_9710248 == 0) && handleNegative_9710245)) {
            n_9710248 = 4294967295;
            }
            
            res_10721681 = subInt(res_10721681, 1);
          }
      } while(false);
    } while(false);

  return result_9710246;

}
function toHex_10170145(x_10170148, len_10170149) {
  var result_10170150 = [];

    result_10170150 = nimCopy(null, toHexImpl_9710241((x_10170148 >>> 0), len_10170149, (x_10170148 < 0)), NTI1188013);

  return result_10170150;

}
function toHex_10491323(c_10491325) {
  var result_10491326 = [];

    var r_10491328 = (((c_10491325.r * 2.5600000000000000e+02))|0);
    var g_10491330 = (((c_10491325.g * 2.5600000000000000e+02))|0);
    var b_10491332 = (((c_10491325.b * 2.5600000000000000e+02))|0);
    var fmtRes_10491336 = [mnewString(0)];
    fmtRes_10491336[0].push.apply(fmtRes_10491336[0], makeNimstrLit("#"));;
    formatValue_10420080(fmtRes_10491336, 0, toHex_10170145(r_10491328, 2), []);
    formatValue_10420080(fmtRes_10491336, 0, toHex_10170145(g_10491330, 2), []);
    formatValue_10420080(fmtRes_10491336, 0, toHex_10170145(b_10491332, 2), []);
    result_10491326 = nimCopy(null, fmtRes_10491336[0], NTI1188013);

  return result_10491326;

}
function tableFind_10721168(t_10721173, key_10721174) {
  var result_10721176 = {Field0: [], Field1: []};

  BeforeRet: do {
    L1: do {
      var index_10721226 = 0;
      var elem_10721227 = {Field0: [], Field1: {Field0: [], Field1: []}};
      var i_10721690 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10721690 < (t_10721173).length)) break L3;
            index_10721226 = i_10721690;
            nimCopy(elem_10721227, t_10721173[chckIndx(i_10721690, 0, (t_10721173).length-1)], NTI10721171);
            if (eqStrings(elem_10721227["Field0"], key_10721174)) {
            nimCopy(result_10721176, elem_10721227["Field1"], NTI10721175);
            break BeforeRet;
            }
            
            i_10721690 = addInt(i_10721690, 1);
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10721176;

}
function luminance_10650103(c_10650105) {
    var Tmp1;
    var Tmp2;
    var Tmp3;

  var result_10650106 = 0.0;

    if ((3.9280000000000002e-02 < c_10650105.r)) {
    Tmp1 = Math.pow(((c_10650105.r + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp1 = (c_10650105.r / 1.2920000000000000e+01);
    }
    
    var r_10655001 = Tmp1;
    if ((3.9280000000000002e-02 < c_10650105.g)) {
    Tmp2 = Math.pow(((c_10650105.g + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp2 = (c_10650105.g / 1.2920000000000000e+01);
    }
    
    var g_10660001 = Tmp2;
    if ((3.9280000000000002e-02 < c_10650105.b)) {
    Tmp3 = Math.pow(((c_10650105.b + 5.5000000000000000e-02) / 1.0549999999999999e+00), 2.3999999999999999e+00);
    }
    else {
    Tmp3 = (c_10650105.b / 1.2920000000000000e+01);
    }
    
    var b_10665001 = Tmp3;
    result_10650106 = (((2.1260000000000001e-01 * r_10655001) + (7.1519999999999995e-01 * g_10660001)) + (7.2200000000000000e-02 * b_10665001));

  return result_10650106;

}
function contrastRatio_10665015(m_10665017, p_10665018) {
    var Tmp1;

  var result_10665019 = 0.0;

    var luminance1_10665020 = luminance_10650103(m_10665017);
    var luminance2_10665021 = luminance_10650103(p_10665018);
    if ((luminance2_10665021 < luminance1_10665020)) {
    Tmp1 = ((luminance1_10665020 + 5.0000000000000003e-02) / (luminance2_10665021 + 5.0000000000000003e-02));
    }
    else {
    Tmp1 = ((luminance2_10665021 + 5.0000000000000003e-02) / (luminance1_10665020 + 5.0000000000000003e-02));
    }
    
    result_10665019 = Tmp1;
    result_10665019 = round_10590332(result_10665019, 1);

  return result_10665019;

}
var appCalculator_10721001 = [document.getElementById("app-calculator")];
var table_10721002 = [document.createElement("table")];
var tr_10721003 = [document.createElement("tr")];
var td_10721004 = [document.createElement("td")];
L1: do {
  var paletteHtmlTable_10721006 = [table_10721002[0].cloneNode(false)];
  var stats_10721009 = [[makeNimstrLit("Old RGB"), makeNimstrLit("Old HSL"), makeNimstrLit("Old L*a*b*"), makeNimstrLit("Old color"), makeNimstrLit("New color"), makeNimstrLit("New L*a*b*"), makeNimstrLit("New HSL"), makeNimstrLit("New RGB")]];
  var nameTr_10721010 = [tr_10721003[0].cloneNode(false)];
  paletteHtmlTable_10721006[0].id = "palette-table";
  nameTr_10721010[0].appendChild(td_10721004[0].cloneNode(false));
  L2: do {
    var s_10721071 = [[]];
    var i_10721494 = 0;
    if ((i_10721494 <= 7)) {
    L3: do {
        L4: while (true) {
        if (!true) break L4;
          s_10721071[0] = stats_10721009[0][chckIndx(i_10721494, 0, (stats_10721009[0]).length-1)];
          var td_10721072 = [td_10721004[0].cloneNode(false)];
          td_10721072[0].innerText = toJSStr(s_10721071[0]);
          nameTr_10721010[0].appendChild(td_10721072[0]);
          if ((7 <= i_10721494)) {
          break L3;
          }
          
          i_10721494 = addInt(i_10721494, 1);
        }
    } while(false);
    }
    
  } while(false);
  paletteHtmlTable_10721006[0].appendChild(nameTr_10721010[0]);
  L5: do {
    var name_10721133 = [[]];
    var colors_10721134 = [{Field0: [], Field1: []}];
    var i_10721501 = 0;
    if ((i_10721501 <= 15)) {
    L6: do {
        L7: while (true) {
        if (!true) break L7;
          name_10721133[0] = colorsTable_10491239[chckIndx(i_10721501, 0, (colorsTable_10491239).length-1)]["Field0"];
          nimCopy(colors_10721134[0], colorsTable_10491239[chckIndx(i_10721501, 0, (colorsTable_10491239).length-1)]["Field1"], NTI10491207);
          var colontmp__10721522 = nimCopy(null, colors_10721134[0], NTI10491207);
          var oldHexColor_10721135 = nimCopy(null, colontmp__10721522["Field0"], NTI1188013);
          var newHexColor_10721136 = nimCopy(null, colontmp__10721522["Field1"], NTI1188013);
          var oldRGB_10721137 = hexToRGB_10525051(oldHexColor_10721135);
          var oldHSL_10721138 = toHSL_10575343(oldRGB_10721137);
          var oldLab_10721139 = toLab_10620029(toXYZ_10590375(oldRGB_10721137));
          var newRGB_10721140 = hexToRGB_10525051(newHexColor_10721136);
          var newHSL_10721141 = toHSL_10575343(newRGB_10721140);
          var newLab_10721142 = toLab_10620029(toXYZ_10590375(newRGB_10721140));
          var tr_10721143 = [tr_10721003[0].cloneNode(false)];
          var td1_10721144 = [td_10721004[0].cloneNode(false)];
          var td2_10721145 = [td_10721004[0].cloneNode(false)];
          var td3_10721146 = [td_10721004[0].cloneNode(false)];
          var td4_10721147 = [td_10721004[0].cloneNode(false)];
          var td5_10721148 = [td_10721004[0].cloneNode(false)];
          var td6_10721149 = [td_10721004[0].cloneNode(false)];
          var td7_10721150 = [td_10721004[0].cloneNode(false)];
          var td8_10721151 = [td_10721004[0].cloneNode(false)];
          var td9_10721152 = [td_10721004[0].cloneNode(false)];
          td1_10721144[0].innerText = toJSStr(name_10721133[0]);
          td2_10721145[0].innerText = toJSStr(oldHexColor_10721135);
          td3_10721146[0].innerHTML = toJSStr(HEX24_10500049(oldHSL_10721138));
          td4_10721147[0].innerHTML = toJSStr(HEX24_10520121(oldLab_10721139));
          td5_10721148[0].style.backgroundColor = toJSStr(oldHexColor_10721135);
          td6_10721149[0].style.backgroundColor = toJSStr(toHex_10491323(newRGB_10721140));
          td7_10721150[0].innerHTML = toJSStr(HEX24_10520121(newLab_10721142));
          td8_10721151[0].innerHTML = toJSStr(HEX24_10500049(newHSL_10721141));
          td9_10721152[0].innerText = toJSStr(toHex_10491323(newRGB_10721140));
          tr_10721143[0].appendChild(td1_10721144[0]);
          tr_10721143[0].appendChild(td2_10721145[0]);
          tr_10721143[0].appendChild(td3_10721146[0]);
          tr_10721143[0].appendChild(td4_10721147[0]);
          tr_10721143[0].appendChild(td5_10721148[0]);
          tr_10721143[0].appendChild(td6_10721149[0]);
          tr_10721143[0].appendChild(td7_10721150[0]);
          tr_10721143[0].appendChild(td8_10721151[0]);
          tr_10721143[0].appendChild(td9_10721152[0]);
          paletteHtmlTable_10721006[0].appendChild(tr_10721143[0]);
          if ((15 <= i_10721501)) {
          break L6;
          }
          
          i_10721501 = addInt(i_10721501, 1);
        }
    } while(false);
    }
    
  } while(false);
  appCalculator_10721001[0].appendChild(paletteHtmlTable_10721006[0]);
} while(false);
L8: do {
  var contrastPairsHtmlTable_10721154 = [table_10721002[0].cloneNode(false)];
  var nameTr_10721155 = [tr_10721003[0].cloneNode(false)];
  var oldBgTr_10721156 = [tr_10721003[0].cloneNode(false)];
  var oldFgTr_10721157 = [tr_10721003[0].cloneNode(false)];
  var oldContrastTr_10721158 = [tr_10721003[0].cloneNode(false)];
  var newBgTr_10721159 = [tr_10721003[0].cloneNode(false)];
  var newFgTr_10721160 = [tr_10721003[0].cloneNode(false)];
  var newContrastTr_10721161 = [tr_10721003[0].cloneNode(false)];
  var oldFirstBgTd_10721162 = [td_10721004[0].cloneNode(false)];
  var oldFirstFgTd_10721163 = [td_10721004[0].cloneNode(false)];
  var oldFirstContrastTd_10721164 = [td_10721004[0].cloneNode(false)];
  var newFirstBgTd_10721165 = [td_10721004[0].cloneNode(false)];
  var newFirstFgTd_10721166 = [td_10721004[0].cloneNode(false)];
  var newFirstContrastTd_10721167 = [td_10721004[0].cloneNode(false)];
  contrastPairsHtmlTable_10721154[0].id = "contrast-pairs-table";
  oldFirstBgTd_10721162[0].innerText = "Old background";
  oldFirstFgTd_10721163[0].innerText = "Old foreground";
  oldFirstContrastTd_10721164[0].innerText = "Old contrast";
  newFirstBgTd_10721165[0].innerText = "New background";
  newFirstFgTd_10721166[0].innerText = "New foreground";
  newFirstContrastTd_10721167[0].innerText = "New contrast";
  nameTr_10721155[0].appendChild(td_10721004[0].cloneNode(false));
  oldBgTr_10721156[0].appendChild(oldFirstBgTd_10721162[0]);
  oldFgTr_10721157[0].appendChild(oldFirstFgTd_10721163[0]);
  oldContrastTr_10721158[0].appendChild(oldFirstContrastTd_10721164[0]);
  newBgTr_10721159[0].appendChild(newFirstBgTd_10721165[0]);
  newFgTr_10721160[0].appendChild(newFirstFgTd_10721166[0]);
  newContrastTr_10721161[0].appendChild(newFirstContrastTd_10721167[0]);
  L9: do {
    var name_10721303 = [[]];
    var colorNames_10721304 = [{Field0: [], Field1: []}];
    var i_10721508 = 0;
    if ((i_10721508 <= 10)) {
    L10: do {
        L11: while (true) {
        if (!true) break L11;
          name_10721303[0] = contrastPairsTable_10491264[chckIndx(i_10721508, 0, (contrastPairsTable_10491264).length-1)]["Field0"];
          nimCopy(colorNames_10721304[0], contrastPairsTable_10491264[chckIndx(i_10721508, 0, (contrastPairsTable_10491264).length-1)]["Field1"], NTI10491242);
          var colontmp__10721686 = nimCopy(null, colorNames_10721304[0], NTI10491242);
          var bgName_10721305 = nimCopy(null, colontmp__10721686["Field0"], NTI1188013);
          var fgName_10721306 = nimCopy(null, colontmp__10721686["Field1"], NTI1188013);
          var colontmp__10721687 = tableFind_10721168(colorsTable_10491239, bgName_10721305);
          var oldBgHexColor_10721307 = nimCopy(null, colontmp__10721687["Field0"], NTI1188013);
          var newBgHexColor_10721308 = nimCopy(null, colontmp__10721687["Field1"], NTI1188013);
          var colontmp__10721692 = tableFind_10721168(colorsTable_10491239, fgName_10721306);
          var oldfgHexColor_10721309 = nimCopy(null, colontmp__10721692["Field0"], NTI1188013);
          var newfgHexColor_10721310 = nimCopy(null, colontmp__10721692["Field1"], NTI1188013);
          var nameTd_10721311 = [td_10721004[0].cloneNode(false)];
          var oldBgTd_10721312 = [td_10721004[0].cloneNode(false)];
          var oldFgTd_10721313 = [td_10721004[0].cloneNode(false)];
          var oldContrastTd_10721314 = [td_10721004[0].cloneNode(false)];
          var newBgTd_10721315 = [td_10721004[0].cloneNode(false)];
          var newFgTd_10721316 = [td_10721004[0].cloneNode(false)];
          var newContrastTd_10721317 = [td_10721004[0].cloneNode(false)];
          nameTd_10721311[0].innerText = toJSStr(name_10721303[0]);
          oldBgTd_10721312[0].style.backgroundColor = toJSStr(oldBgHexColor_10721307);
          oldFgTd_10721313[0].style.backgroundColor = toJSStr(oldfgHexColor_10721309);
          oldContrastTd_10721314[0].innerText = toJSStr(cstrToNimstr(nimFloatToString(contrastRatio_10665015(hexToRGB_10525051(oldBgHexColor_10721307), hexToRGB_10525051(oldfgHexColor_10721309)))));
          newBgTd_10721315[0].style.backgroundColor = toJSStr(newBgHexColor_10721308);
          newFgTd_10721316[0].style.backgroundColor = toJSStr(newfgHexColor_10721310);
          newContrastTd_10721317[0].innerText = toJSStr(cstrToNimstr(nimFloatToString(contrastRatio_10665015(hexToRGB_10525051(newBgHexColor_10721308), hexToRGB_10525051(newfgHexColor_10721310)))));
          nameTr_10721155[0].appendChild(nameTd_10721311[0]);
          oldBgTr_10721156[0].appendChild(oldBgTd_10721312[0]);
          oldFgTr_10721157[0].appendChild(oldFgTd_10721313[0]);
          oldContrastTr_10721158[0].appendChild(oldContrastTd_10721314[0]);
          newBgTr_10721159[0].appendChild(newBgTd_10721315[0]);
          newFgTr_10721160[0].appendChild(newFgTd_10721316[0]);
          newContrastTr_10721161[0].appendChild(newContrastTd_10721317[0]);
          if ((10 <= i_10721508)) {
          break L10;
          }
          
          i_10721508 = addInt(i_10721508, 1);
        }
    } while(false);
    }
    
  } while(false);
  contrastPairsHtmlTable_10721154[0].appendChild(nameTr_10721155[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(oldBgTr_10721156[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(oldFgTr_10721157[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(oldContrastTr_10721158[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(newBgTr_10721159[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(newFgTr_10721160[0]);
  contrastPairsHtmlTable_10721154[0].appendChild(newContrastTr_10721161[0]);
  appCalculator_10721001[0].appendChild(contrastPairsHtmlTable_10721154[0]);
} while(false);
